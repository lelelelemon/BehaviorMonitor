<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
                 "http://www.docbook.org/xml/5.0/dtd/docbook.dtd" [
  <!ENTITY % local SYSTEM "local-entities.ent">
  <!ENTITY % custom SYSTEM "custom-entities.ent">
  %local;
  %custom;
]>
<section xml:id="section.lexical-resources.location">
  <title>Location of lexical resources</title>

  <para>
    The user-define &PROD; lexical resources are placed at the following application-specific locations:
  </para>
  
  <variablelist>
    <varlistentry>
      <term>&CLIBP;</term>
      <listitem><para>Lexical resources are placed in the <filename>resources</filename>
      folder under the distribution folder.</para></listitem>
    </varlistentry>
    
    <varlistentry>
      <term>&JA;</term>
      <listitem><para>Lexical resources are placed in the <filename>resources</filename>
      folder under the distribution folder. The <filename>UsingCustomLexicalResources</filename> 
      class demonstrates how to configure controllers to use a given path for loading 
      lexical resources.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>&WA;</term>
      <listitem><para>Lexical resources are placed in the <filename>WEB-INF/resources</filename>
      folder of the web application archive (WAR) file.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>&DCS;</term>
      <listitem><para>Lexical resources are placed in the <filename>WEB-INF/resources</filename>
      folder of the DCS' web application archive (WAR) file. The WAR file is located
      in the <filename>war/</filename> folder under the distribution folder.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>&DCW;</term>
      <listitem><para>Lexical resources are extracted to the workspace folder on first launch.
      The workspace folder is typically under the Workbench's distribution directory, unless
      its location is modified by the <varname>-data</varname> option is passed to 
      the workbench launcher at startup.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>&PROD; core JAR file</term>
      <listitem><para>Lexical resources are placed at the root of the JAR file. The default lookup
      location for the lexical resource factory is to scan context class loader's resources
      and typically (if no other class loader or location that precedes the core JAR contains such resources)
      these resources will be used by the implementation. &JA; contains
      an example called <filename>UsingCustomLexicalResources</filename>
      that demonstrates ways of overriding the default location.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>&CSA;</term>
      <listitem><para>Lexical resources are embedded in the core assembly. At runtime,
      <emphasis>all assemblies</emphasis> present in the stack trace of the thread initializing
      the clustering controller (and thus a certain clustering algorithm) 
      are scanned for resources (the defaults are always scanned last). An
      example class named <filename>UsingCustomLexicalResources</filename>, that 
      is provided as part of &CSA; distribution, demonstrates ways of overriding
      the default lexical resource search locations from .NET.</para></listitem>
    </varlistentry>

    <varlistentry>
      <term>Apache Solr clustering plugin</term>
      <listitem>
        <para>
          The plugin tries to load the lexical resources from the 
          <filename>{solr.home}/conf/clustering/carrot2</filename>
          directory. If a resource is not found in the directory, 
          the default version of the resource is loaded from &PROD; JAR.
        </para>
        <para>
          A different location of lexical resources can be provided
          using the <link xlink:href="http://wiki.apache.org/solr/ClusteringComponent#carrot.lexicalResourcesDir">carrot.lexicalResourceDir</link>
          Solr parameter. In particular, an absolute path can be provided
          to share the same lexical resources between multiple Solr cores.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
</section>
